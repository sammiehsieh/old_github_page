

[
  
  
    
    
      {
        "title": "Hello World",
        "excerpt": "This is my very first blog post. I haven’t written anything yet but I’m sure I have some great stories to tell.\n",
        "content": "This is my very first blog post. I haven’t written anything yet but I’m sure I have some great stories to tell.\n",
        "url": "/general/2018/08/22/hello-world/"
      },
    
      {
        "title": "Markdown testing",
        "excerpt": "Excerpt means the first paragraph of article which shows on description.\n",
        "content": "This is heading 1.\nThis is heading 2.\nThis is heading 3.\nThis is heading 4.\nThis is heading 5.\nThis is heading 6.\n\nThis is general word showing.\n\nThis is bold.\nThis is delete.\nThis is italic.\n\n\n  ul tag\n    \n      li tag 1\n      li tag 2\n    \n  \n  Checked\n  Unchecked\n  It has to use CSS to remove bullet points in checkbox.\n\n\n\n\n  Quote: margin -$ px depending on number of quotes\n\n\nThis is a simple word or sentence.\nThese are mutiple sentences, paragraphs, or coding.\nFor example, it can including multiple lines in a block.\n\n\nfunction javascript(argument1, argument2) {\n    console.log('Try javascript in markdown.')\n    return argument1 + argument2\n}\n\n.css {\n    font-size: 2rem;\n    background-color: lightblue;\n}\n\n&lt;div class=\"container\"&gt;\n    &lt;span&gt;This is html.&lt;/span&gt;\n&lt;/div&gt;\n\n\n\n  \n    \n       \n      No.\n      Title\n      Content\n    \n  \n  \n    \n      Text-Align\n      right\n      center\n      default: left\n    \n    \n      -\n      01\n      Title One\n      Contnet One\n    \n    \n      -\n      02\n      Title Two\n      Content Two\n    \n    \n      -\n      03\n      Title Three\n      Content Three\n    \n    \n      -\n      100\n      Title Hundred\n      Content Hundred\n    \n    \n      -\n      1000\n      Title Thousand\n      Content Thousand\n    \n  \n\n",
        "url": "/general/2019/07/15/Test-Article/"
      },
    
      {
        "title": "Regex | Regular Expression 不用就忘記",
        "excerpt": "剛開始收到主題的時候想說regex以前老師有講過一點點，但是查了資料才發現根本就忘得差不多了XD\n\n",
        "content": "剛開始收到主題的時候想說regex以前老師有講過一點點，但是查了資料才發現根本就忘得差不多了XD\n\n在這段期間也幾乎都是google一下大家常用的規則，然後就複製貼上再實際測試哪個最符合想要的，沒在管內容長怎樣\n\n畢竟長/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/的字串在程式寫正順的時候，沒有人有那個美國時間慢慢查慢慢理解啦!!\n\n但是就算有時間檢查這一大堆字串的時候，好像也會有種有看沒有懂的感覺，或是要每看完一次隔幾天就又忘了\n\n但是其實，regex是學一次可以用一輩子的神奇寶貝欸XD 所以，話不多說，開始吧!!\n\n\n\n介紹\n\n\n  全名 Regular Expression，又稱為正規表達式、正規表示法、規則運算式、常規表示法\n  是一種語言，也可以說是程式語言 (?)，因為它是可以被維護、實作、重寫的\n  在數學上是狀態機，在電腦實作中是採用樹狀結構方式實現\n\n    \n      狀態機：\n有限個狀態以及在這些狀態之間的轉移和動作等行為的學模型；regex中為判斷接收到的事件是否滿足，如果滿足則移動到下一個狀態，直到整個狀態機滿足為止\n      樹狀結構：\n有優先順序差異；例如 /(ab+c)* + aca/，當中優先度為 | 大於 +*? 大於 () 大於 [] 大於 abc 大於 range([a-z]) 大於 縮寫(\\w) 大於 空白(\\s)\n\n    \n  \n\n\n\n\n常見使用時機\n\n\n  比對找出特定的資料是否存在\n  判定輸入資料的格式是否符合規定\n  由字串中擷取特定的欄位，如分群比對、解析網頁內容\n  內容更換\n\n\n\n\n工具\n\n\n  網頁開發工具，例如在Chrome的開發人員模式下按 (Windows)Ctrl+Shift+F (mac)Alt+Command+I\n  IDE當中，例如Visual Studio Code的搜尋功能\n  文件檔案當中，例如Google文件的搜尋功能\n\n\nPlayground\n\n\n  Regex101 https://regex101.com/\n  RegEx Testing https://www.regextester.com/\n  Debuggex: Online visual regex tester. JavaScript, Python, and PCRE. https://www.debuggex.com/\n\n\nLibrary\n\nRegular Expression Library http://regexlib.com/Default.aspx\n\n\n\n語法\n\n1. Character Classes(字元類別)\n\na：英文字母 a 這個字元，大小寫有區分\n0：數字 0 這個字元\n.：任意字元，但是不能是換行字串的開頭\n-：字元集合，用來指定字源的區間，必須包在中括號裡面\n\n[]：括號內的任何字元\n[^]：不在括號內的任何字元\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /a/\n      只含有字母 a 的字串\n      “a”,”aaa”\n    \n    \n      /./\n      含有任意字元的字串\n      Hello World!\n    \n    \n      /.a/\n      a之前有任意字元的2碼字串，但不可為換行的第一個字\n      An apple a day keeps the doctor away.\n    \n    \n      /[aeiou]/\n      字串中的小寫母音\n      Buy ice cream in IKEA.\n    \n    \n      /[^aeiouAEIOU]/ \n      字串中不是母音的字元\n      Monkey likes banana.\n    \n    \n      /[0-9]/\n      字串中的數字字元\n      1 file have changed at 2020-02-**18.\n    \n    \n      /[a-z]/\n      字串中小寫字母的字元\n      1 file have changed at 2020-02-18.\n    \n    \n      /[^a-zA-Z]/\n      不含英文字母的字串\n      “2266”,”9487”\n    \n  \n\n\n1.1 特殊字元\n\n\\.：表示 . 這個字元，但是不能寫成 /./ 會被判斷成任意字元\n\\+：表示 + 這個字元，類似的還有 \\? \\*\n\\(：表示 ( 這個字元，類似的還有 \\) \\[ \\]\n\\\\：表示 \\ 這個字元\n\n\\d：任何數字的字元，等同 [0-9]\n\\D：任何非數字的字元，等同 [^0-9]\n\\w：任何數字字母底線，等同 [A-Za-z0-9_]\n\\W：任何非數字字母底線，等同 [^A-Za-z0-9_]\n\\s：任何空白字元(空白/換行/tab...)，等同 [ \\f\\n\\r\\t\\v]\n\\S：任何非空白字元(空白/換行/tab...)，等同 [^ \\f\\n\\r\\t\\v]\n\n\\f：form feed 換頁\n\\n：line feed 換行\n\\r：carriage return 回列首\n\\t：tab 制表符\n\\v：vertical tab 垂直制表符\n※ Windows text files use \"\\r\\n\" to terminate lines, while Unix test files use \"\\n\"\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /https:\\/\\//\n      超文本傳輸安全協定\n      https://www.google.com\n    \n    \n      /\\w\\w\\w\\w@gmail\\.com/\n      帳號為 4 碼的 Gmail 信箱\n      “test@gmail.com”,“oops@gmail.com”\n    \n    \n      /[0-9\\+\\-\\*\\/]/\n      四則運算算式\n      “1+2*3”\n    \n    \n      /[A-Z][1-2]\\d\\d\\d\\d\\d\\d\\d\\d/\n      簡易驗證身分證字號\n      “F123456789”\n    \n  \n\n\n\n\n2. Repetition(重複次數)\n\n*：出現 0 次以上，等同於 {0,}\n?：出現 0 次或 1 次，可有可無的意思，等同於 {0,1}\n+：出現 1 次以上，等同於 {1,}\n  \n{n}：出現 n 次\n{n,}：出現 n 次以上\n{,n}：出現 n 次以下\n{n,k}：出現 n 次到 k 次\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /[^aeiou]*/\n      不包含小寫母音的字串\n      “COcOnUt”,”grApE”\n    \n    \n      /^[A-Za-z][1-2]\\d{8}$/\n      簡易驗證身分證字號\n      “A123456789”\n    \n    \n      /^09\\d{2}-?\\d{3}-?\\d{3}$/\n      手機號碼\n      “0912345678”,“0912-345-678”\n    \n    \n      /^0\\d{1,3}-?\\d{5,8}/\n      台灣市內電話\n      “04-22203585”,“037-322150”,“0836-89146”\n    \n  \n\n\n題外話一下，馬祖的區碼是0836，我以為苗栗037已經很多位數了...\n\n\n\n3. Flag(旗標)\n\ng：global search，比對字串中所有符合的配對，否則只找一個\ni：case-insensitive search，規則不區分大小寫\nm：multi-line search，多行比對，^比對每行開頭，$比對每行結尾\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /xyz[0-9]/\n      第一組xyz開頭後接數字\n      xyz123xyz456\n    \n    \n      /xyz[0-9]/g\n      全部xyz開頭後接數字\n      xyz123xyz456\n    \n    \n      /xyz[0-9]/ig\n      全部xyz開頭後接數字且不區分大小寫\n      xyz123XYZ456\n    \n  \n\n\n\n\n4. Anchoring Metacharacters(錨點元字符)：設定規則邊界\n\n^：字串開頭\n$：字串結尾\n\n\\b：word boundary 比對字串邊界非一般字元\n\\B：non-word boundary 比對字串邊界為非一般字元\n\n※ 注意 \\b 和 [\\b] 是不一樣的，[\\b] 是用來比對 backspace\n\n\n  多數基本資料 input 的結果都會有 ^ 和 $，例如身分證、生日、電話等等\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /^https?:\\/\\//\n      超文本傳輸安全協定\n      https://www.google.com  http://domain.ca\n    \n    \n      /\\.com$/\n      .com結尾的字串\n      https://tw.yahoo.com  https://www.kkday.com\n    \n    \n      /\\bgo\\b/\n      邊界不是一般字元或底線的詞\n      go go_goyago.go.go-go-go.go\n    \n    \n      /\\Bgo\\B/\n      邊界是一般字元或底線的詞\n      go go_goyago.go.go-go-go.go\n    \n  \n\n\n4.1 lookahead(往前看/右合樣)、lookbehind(往後看/左合樣)\n\n(?=)：Positive lookahead 代表「往前看是」的意思，後面接上字元\n(?!)：Negative lookahead 代表「往前看不是」的意思，後面接上字元\n\n※ 以下不支援 IE, Edge, Firefox, Safari，屬於 ES2018 的功能\n(?&lt;=)：Positive lookbehind 代表「往後看是」的意思，前面接上字元\n(?&lt;!)：Negative lookbehind 代表「往後看不是」的意思，前面接上字元\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /\\d(?=[AB])/\n      找有A或B接在後面的「數字」，等同於數字後面有A或B\n      123A45B67AB8A0B\n    \n    \n      /\\d(?![AB])/\n      找沒有A或B接在後面的「數字」，等同於數字後面沒有A或B\n      123A45B67AC8E0B\n    \n    \n      /(?&lt;=[OP])./\n      找有O或P接在前面的「任何字元」，等同於字元前面有O或P\n      AOEPSOFPOPVFOP\n    \n    \n      /(?&lt;![OP])./\n      找沒有O或P接在前面的「任何字元」，等同於字元前面沒有O或P\n      AOEPSOFPOPVFOP\n    \n  \n\n\n\n\n\n  白話文這樣說\n\n/Peter(?=Mary)/ \nPeter後面要接上Mary，這樣Peter才有意義 =&gt; Mary是Peter存在的意義 \n/Peter(?!Jessica)/ \nPeter後面一定不能接Jessica，這樣Peter才有意義 =&gt; Peter跟Jessica在一起變成沒意義的空殼\n\n/(?&lt;=George)Michelle/ \nMichelle前面要有George，這樣Michelle才有意義 =&gt; George是Michelle存在的意義 \n/(?&lt;!Louis)Michelle/ \nMichelle前面一定不能接Louis，這樣Michelle才有意義 =&gt; Michelle跟Louis再一起變成沒意義的空殼\n\n\n\n\n5. Alternation(交替)、Grouping(群組)\n\n|：代表「或」的意思\n()：代表「群組」的意思\n\n※ 以下不支援 IE, Edge, Firefox\n?&lt;GROUPNAME&gt;：代表「群組命名」的意思`，屬於 ES2018 的功能\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /cat|dog/\n      貓或狗\n      “cat”,”dog”\n    \n    \n      /I like cat|dog/\n      我喜歡貓或狗\n      “I like cat”,”dog”\n    \n    \n      /I like (cat|dog)/\n      我喜歡貓或我喜歡狗\n      “I love cat”,”I love dog”\n    \n    \n      /Pet(Hamster)?/\n      寵物鼠\n      “Pet”,”PetHamster”\n    \n    \n      /(?&lt;pet&gt;cat|dog|hamster)/\n      寵物包含貓、狗、老鼠\n      “cat”,”dog”,”hamster”\n    \n    \n      /^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$/\n      西元生日格式\n      “1978-12-26”\n    \n  \n\n\n\n  GROUPNAME 可以搭配 match() 方法做使用，等一下有範例\n\n\n\n\n6. Greedy(窮盡)、Lazy(最少)\n\n※ Greedy 盡可能多地從每次出現的特定模式進行比對，可以說是匹配優先\n*：greedy 窮盡比對零或多次，類似的還有 + ? {n} {n,} {n,k}\n\n※ Non-greedy(Lazy) 比對的項目愈少愈好，可以說是忽略優先\n*?：non-greedy(lazy) 非窮盡比對零或多次 +? ?? {n}? {n,}? {n,k}?\n\n\n\n  \n    \n      RegExp\n      說明\n      範例\n    \n  \n  \n    \n      /A.*Z/\n      A開頭Z結尾的最大集合字串\n      eeeAiiZuuuuAoooZeeee\n    \n    \n      /A.*?Z/\n      A開頭Z結尾的許多小字串\n      eeeAiiZuuuuAoooZeeee\n    \n  \n\n\n\n  和狀態機的 backtrack 這個關鍵字有相關，有興趣可以查看看!!\n\n\n\n\n在程式中使用\n\nHtml 5\n\n&lt;form&gt;\n  &lt;input type=\"text\" name=\"mobile\" id=\"mobile\" pattern=\"^09\\d{2}-\\d{3}-\\d{3}\" /&gt;\n&lt;/form&gt;\n\n\nJavaScript\n\n\n  \n    \n      方法\n      說明\n    \n  \n  \n    \n      exec\n      以陣列回傳字串中匹配到的部分，無匹配則回傳null\n    \n    \n      test\n      搜尋字串中是否有符合的部分，回傳true/false\n    \n    \n      match\n      以陣列回傳字串中匹配到的部分，無匹配則回傳null\n    \n    \n      search\n      尋找字串中是否有符合的部分，有會回傳index，無則回傳-1\n    \n    \n      replace\n      尋找字串中匹配的部，第二個參數為取代之新字串\n    \n    \n      split\n      在字串根據匹配到的項目拆成陣列\n    \n  \n\n\n/* 基本 function 介紹 */\n\nvar pattern = /[A-Z]\\d{9}/; // 效能較好，適合 pattern 不會改變的情況\n// var pattern = new RegExp('[A-Z]\\d{9}'); // 效能較差，適合用在 pattern 可能動態改變的情況\nvar id = 'F123456789 is user identification of John';\n\nconsole.log(pattern.exec(id)); // [\"F123456789\"]\nconsole.log(pattern.test(id)); // true\nconsole.log(id.match(pattern)); // [\"F123456789\"]\nconsole.log(id.search(pattern)); // 0\nconsole.log(id.replace(pattern, '5487')); // \"5487 is user identification of John\"\nconsole.log(id.split(pattern)); // [\"\", \" is user identification of John\"]\n\n\n\n  單純查看字串是否包含某 pattern，建議使用 test 及 search，效能較好\n\n\n/* 範例一 */\nvar re = /(\\w+)\\s(\\w+)/;\nvar str = 'John Smith';\nvar newStr = str.replace(re, '$2, $1');\nconsole.log(newStr); // \"Smith John\"\n// 每一個 regex 配對到的 \"內容\" 都會變成一個 $數字\n\nfunction replacer(match, p1, p2, p3, offset, string) {\n  // p1 is non-digits, p2 digits, and p3 non-alphanumerics\n  return [p1, p2, p3].join(' - ');\n}\nvar newString = 'abc12345#$*%'.replace(/([^\\d]*)(\\d*)([^\\w]*)/, replacer);\nconsole.log(newString);  // abc - 12345 - #$*%\n\n\n/* 範例二 */\nvar matched = 'An apple a day keeps the doctor away.'.match(/(a.)(p.)e/);\nvar globalMatched = 'An apple a day keeps the doctor away.'.match(/(a.)(p.)e/g);\n\nconsole.log(RegExp.$1); // \"ap\" \nconsole.log(RegExp.$2); // \"pl\"\nconsole.log(matched[1]); // \"ap\" \nconsole.log(matched[2]); // \"pl\"\n\n// [0]配對到的、[1]從配對到的裡找第一組、[2]從配對到的裡找第二組\nconsole.log(matched); // [\"apple\", \"ap\", \"pl\"] \nconsole.log(globalMatched); // [\"apple\"]\n\n\n\n  RegExp $n 為非標準的使用方式，請勿在正式環境使用\n\n\n/* 範例三 */\nvar regexp = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/;\nvar match = regexp.exec('2020-19');\n\nconsole.log(match.groups);          // {year: \"2020\", month: \"02\", day: \"19\"}\nconsole.log(match.groups.year);     // 2020\nconsole.log(match.groups.month);    // 02\nconsole.log(match.groups.day);      // 19\n\n\n\n\n練習題\n\n\n  24小時制時間格式，如23:59:59\n  Email，如johnSmith@gmail.com、jogn8787@gms.tku.edu.tw及928365101@s01.tku.edu.tw皆屬合法格式\n  HTML格式，如網頁中所有的&lt;p&gt;&lt;/p&gt;\n  檔案名稱，如.jpg、.gif\n  [進階] 高強度密碼，6 位數以上，並且至少包含 大寫字母、小寫字母、數字、符號 各一\n\n\n\n\n補充\n\n狀態機表現\n\n字母、數字\n\n以 /gmail/ 作為規則為例，其實是從 g-m-a-i-l 找到前一個字母後繼續向右找\n\n\n集合\n\n以 /h[aeiou]ng/ 作為規則，則是嘗試 a|e|i|o|u 由上往下找\n\n\n重複次數：? /* /+ /{}\n\n\n  ?：以 /https?/ 作為規則\n\n  *：\n(1) 以 /a*/ 作為規則\n    \n(2) 以 /\\d*.a../ 作為規則\n    \n  +：\n(1) 以 /a+/ 作為規則\n    \n(2) 以 /\\d+.a../ 作為規則\n    \n  {n}：\n(1) 以 /a{3}/ 作為規則\n    \n(2) 以 /(bra){3}/ 作為規則\n    \n\n\nAlternation(交替)\n\n以 /cat|dog/ 作為規則\n\n\nGreedy(窮盡), Lazy(最少)\n\n\n  以 /a.*t/ 作為規則\n\n  以 /a.*?t/ 作為規則\n\n\n\n\n\n學習資源\n\n\n  [實用] 用 Regular Expression 做字串比對 · Larry\n  筆記｜Javascript正規表達式#2 - 基本語法 - Dez.tw\n  整理一些 Regex 的學習資源 | The Will Will Web\n  使用 Regular Expression 驗證密碼：使用 JavaScript 的陷阱 | The Will Will Web\n  無聊技術研究: RegExp 應用： lookahead , lookbehind\n  :thumbsup: [Regular Expression]正規表達式教學，使用狀態機輔助說明-基礎篇\n  :thumbsup: [JS] 正則表達式(Regular Expression, regex) | PJCHENder 私房菜\n\n",
        "url": "/regex/2020/02/05/Regex/"
      },
    
  
  
  
  {
    "title": "About this website",
    "excerpt": "\n",
    "content": "I’m not sure yet what this website is about, but I’m sure I’ll work it out soon.\n",
    "url": "/about/"
  },
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Blog",
    "excerpt": "\n",
    "content": "\n",
    "url": "/blog/"
  },
  
  {
    "title": "Sammie's Blog",
    "excerpt": "\n",
    "content": "There isn’t much going on here yet, but watch this space\n",
    "url": "/"
  }
  
]

